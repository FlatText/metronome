<head>
        <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,700,800" rel="stylesheet">
</head>
<main>
    <h1>Metronome</h1>

    <div class="time-signature">
        <select id="note-type" name="note">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
            <option value="9">9</option>
            <option value="10">10</option>
            <option value="11">11</option>
            <option value="12">12</option>
        </select>
        <span class="separator">/</span>
        <select id="beat-type" name="beat">
            <option value="2">2</option>
            <option value="4" selected>4</option>
            <option value="8">8</option>
            <option value="16">16</option>
            <option value="32">32</option>
        </select>
    </div>

    <div>
        <input id="tempo" placeholder="tempo" type="text" name="tempo" value="120">
    </div>
    <button onclick="togglePlay()">Start/Stop</button>

    <div class="counter"></div>

</main>

<style>
html, body, div, span, applet, object, iframe,
a, abbr, acronym, address, big, cite, code,
h1,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0
}

html {
    box-sizing: border-box;
    padding: 25px;
    font-family: 'Open Sans', sans-serif;

}

*, *:before, *:after {
    box-sizing: inherit;
}

main {
    display: inline-block;
    margin: auto;
    background: white;
    padding: 25px;
    border: 1px solid #ccc;
}

input, select {
    padding: 10px;
    margin-bottom: 25px;
}

input {
    width: 100%;
}

button {
    padding: 10px;
    width: 100%;
}

.time-signature * + * {
    margin-left: 25px;
}

.separator {
    font-weight: bold;
    font-size: 32px;
}
</style>

<script>

    /**
     * How often we should beep
     */
    var beepInterval;

    const context = new AudioContext();

    /**
      * Low: The beep that is made on every beat but the main beat
      * High: The beep that is made on the first beat of the bar
      */
    const frequencies = {
        low: 880.0,
        high: 1760.0
    };

    const elements = {
        noteType: document.getElementById("note-type"),
        beatType: document.getElementById("beat-type"),
        tempo: document.getElementById("tempo"),
    };

    /**
      * timesThrough: The amount of beeps made. This is counted so
      *               we can find out the first beat of the bar.
      * playSound: Whether or not we should be beeping
      */
    const settings = {
        timesThrough: 0,
        playSound: false
    }

    function togglePlay() {
        settings.playSound = !settings.playSound;
        updateBeepInterval();
        settings.timesThrough = 0;
    }

    function updateBeepInterval() {
        const interval = parseInt(bpmToMs(elements.tempo.value, elements.beatType.value))
        clearInterval(beepInterval)

        if (settings.playSound) {
            beepInterval = setInterval(tick, interval);
        }
    }

    function bpmToMs(beatsPerMinute, beatType) {

        const noteDurations = {
            2: beatsPerMinute / 2,
            4: beatsPerMinute,
            8: beatsPerMinute * 2,
            16: beatsPerMinute * 4,
            32: beatsPerMinute * 8
        };

        const milliseconds = (60000 / noteDurations[beatType]);

        return milliseconds;
    }

    function tick() {
        settings.timesThrough++;
        const osc = context.createOscillator();
        const gain = context.createGain();

        osc.type = "sine";
        osc.frequency.value = frequencies.low;
        osc.connect(gain);

        gain.connect(context.destination);

        if (settings.timesThrough % elements.noteType.value === 0) {
            osc.frequency.value = frequencies.high
        }

        osc.start();
        gain.gain.exponentialRampToValueAtTime(0.00001, context.currentTime + .5)
    }
</script>
